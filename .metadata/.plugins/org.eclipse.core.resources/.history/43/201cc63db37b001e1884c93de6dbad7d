const areas = [
		{
			code: 1,
			name: '자기이해',
			questions: [
				"나는 내가 어떤 일을 좋아하는지 안다.",
				"나는 내 자신에 대해 잘 알고 있다.",
				"나는 내가 무엇을 잘 하는지 안다.",
				"나는 내가 소중하게 생각하는 가치가 무엇인지 안다.",
				"나는 내가 즐겁게 할 수 있는 일이 무엇인지 안다."
			]
		},
		{
			code: 2,
			name: '전공 직업 지식',
			questions: [
				"나는 내가 관심있는 직업에서 하는 일과 필요한 능력에 대해 안다",
				"나는 내가 선택한 전공(학과)에 대해 잘 알고 있다.",
				"나는 내가 관심있는 직업의 향후 전망에 대해 안다.",
				"나는 내가 관심있는 직업에 대해 잘 알고 있다.",
				"나는 나의 전공에 관련된 직업에 대하여 상세히 설명해 줄 수 있다.",
				"나는 내가 관심있는 직업의 임금수준과 근무환경에 대해 안다."
			]
		}, {
			code: 3,
			name: '진로결정확신도',
			questions: [
				"나는 나의 진로를 결정했다.",
				"나는 내가 결정한 진로에 대하여 당분간은 바꿀 생각이 없다",
				"나는 내가 결정한 진로에 대해 만족한다.",
				"나는 타인들에게 내가 결정한 진로에 대해 말할 수 있다.",
				"나는 내가 결정한 진로와 관련하여 구체적인 계획을 갖고 있다."
			]
		},  {
			code: 4,
			name: '의사결정 자신감',
			questions: [
				"나는 결정을 회피하려는 경향이 있다.",
				"나는 내가 결정한 것에 대해 후회하는 경우가 많다.",
				"나는 내 문제를 스스로 결정한 적이 없다.",
				"나는 결과가 두려워서 결정을 못하는 경우가 많다.",
				"나는 누군가가 대신 결정해 주기를 바란다.",
				"나는 결정에 대해 두려움을 갖고 있다."
			]
		}, {
			code: 5,
			name: '관계활용 자신감',
			questions: [
				"나는 진로를 결정하는 과정에서 주변 사람들에게 도움을 달라고 요청할 수 있다.",
				"나는 교원임용시험에 대한 정보를 대학의 취업관련 기관에 방문하여 알아볼 수 있다.",
				"나는 교원임용시험 합격에 대한 정보를 주변 사람들에게 요청하여 얻을 수 있다.",
				"나는 교원임용시험과 관련된 의문이 있을 때 교육청 담당자에게 직접 문의할 수 있다.",
				"나는 내가 어려움에 처했을 때 도와줄 수 있는 사람을 찾아 도움을 요청할 수 있다.",
				"나는 취업을 위해 주변 사람들에게 도움을 요청할 수 있다."
			]
		}, {
			code: 6,
			name: '진로 준비도',
			questions: [
				"나는 직장에서 요구하는 능력을 준비하고 있다.",
				"나는 자기소개서 쓰는 방법을 잘 안다.",
				"나는 학교현장에서 요구하는 장점들을 부각시켜 자기소개서를 작성할 수 있다.",
				"나는 교직적성 심층 면접에 대비할 자신이 있다.",
				"나는 교원임용시험합격을 위하여 필요한 정보를 수시로 확인할 수 있다.",
				"나는 면접시 질문에 대해 유연하게 대응할 수 있는 대화기술이 있다.",
				"나는 나의 자기소개서를 잘 작성할 수 있다."
			]

		}



	];
document.addEventListener('DOMContentLoaded', function() {
	var tableContainer = document.getElementById('table-container');

	// 여기에 다른 영역들에 대한 질문 배열도 추가하면 됩니다.
	

	areas.forEach(area => {
		var table = document.createElement('table');
		table.className = 'selfUnderstandingTable';
		table.setAttribute('border', '1');

		// 헤더 생성
		var header = table.createTHead();
		var headerRow = header.insertRow(0);

		// 진단 영역 헤더
		var areaHeader = document.createElement('th');
		areaHeader.innerText = "진단 영역";
		areaHeader.rowSpan = area.questions.length + 1; // +1은 헤더 행 때문입니다.
		headerRow.appendChild(areaHeader);

		// 지문 헤더
		var questionHeader = document.createElement('th');
		questionHeader.innerText = "지문";
		headerRow.appendChild(questionHeader);

		// 점수 헤더
		for (var i = 1; i <= 5; i++) {
			var scoreHeader = document.createElement('th');
			scoreHeader.innerText = i + "점";
			headerRow.appendChild(scoreHeader);
		}

		// 각 질문과 평가 옵션을 행에 추가
		area.questions.forEach((question, index) => {
			var row = table.insertRow();

			if (index === 0) {
				var questionCategoryCell = row.insertCell();
				questionCategoryCell.innerText = area.name;
				questionCategoryCell.rowSpan = area.questions.length; // 질문 수만큼 rowspan 적용
			}

			var questionCell = row.insertCell();
			questionCell.innerText = question;

			// 점수 선택 옵션 추가
			for (var i = 1; i <= 5; i++) {
				var scoreCell = row.insertCell();
				var radioButton = document.createElement('input');
				radioButton.type = 'radio';
				radioButton.name = 'question' + index;
				radioButton.value = i;
				scoreCell.appendChild(radioButton);
			}
		});

		tableContainer.appendChild(table);
	});
});

function showAlert() {
	alert('경고창이 뜹니다!');
}

